---
# environment:
#   RAILS_ENV:  "{{ rails_env }}"
#   PATH:       "{{ bundler_path }}:{{ ansible_env.PATH }}"

  # TODO: review: not at all sure these are having any effect, at least on CentOS
# - name: set environment variables
#   become: true
#   lineinfile:
#     dest: /etc/environment
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#     state: "present"
#   with_items:
#     - regexp: "^RAILS_ENV="
#       line:    "RAILS_ENV={{ rails_env }}"
#     - regexp: "^PATH="
#       line:    "PATH={{ bundler_path }}:{{ gems_path }}:{{ ansible_env.PATH }}"

- name: include os-specific vars
  include_vars: "{{ansible_os_family}}.yml"

- name: install os-specific prereqs
  include: "{{ansible_os_family}}_prereqs.yml"
  become: true

- name: configure application user
  include: configure_app_user.yml

# NOTE: the gem module does not jibe with rbenv. (which we are using for local installs now)
# it installs but rehashing to get the executables doesn't work
- name: install rails for ansible (login) user
  command: "gem install --version {{ rails_version }} rails"
  notify: shim ruby executables

- name: flush handlers to get rails executable
  meta: flush_handlers

  # FIXME: parameterize to only install when needed
# - name: install pg gem for working with postgres
#   gem:
#     name: pg
#     state: present

# TODO: only include when needed
- name: inotify watcher fix
  include: inotify_watcher_fix.yml
  when: ansible_os_family == 'RedHat'

  # TODO: consider assertion or flow control to prevent unproductive rebuild/redeploy settings on fresh system
- name: stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat
  become: true

- name: stat sufia deploy dir
  stat:
    path: "{{ sufia_deploy_dir }}"
  register: sufia_deploy_stat
  become: true

- name: prevent mutually-exclusive build settings
  assert:
    that:
      - not (sufia_build_app and sufia_get_app)
    msg: "sufia_build_app and sufia_get_app are mutually exclusive"

- name: stop servers before rebuilding
  include: stop_servers.yml
  when: sufia_mode == "dev"

- name: build a new application
  include: build_application.yml
  # become: true
  # become_user: "{{ app_user }}"
  when: sufia_build_app # sufia_rebuild or (not sufia_deploy_stat.stat.exists and not sufia_build_stat.stat.exists)

- name: get existing application from a repo
  include: get_application.yml
  when: sufia_get_app

- name: re-stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat
  become: true

- name: deploy the application in the build directory
  include: deploy_application.yml
  # NOTE: can't deploy w/o something built
  # TODO: consider reflow to avoid illogical conditions
  when: sufia_mode == "prod_like" and sufia_build_stat.stat.exists and (sufia_redeploy or not sufia_deploy_stat.stat.exists)
  # when: sufia_build_stat.stat.exists and (sufia_redeploy or not sufia_deploy_stat.stat.exists)
  become: true

  # FIXME: this is not a good solution. issue may be that the deploy dir is mounted.
  # may need to provide secontext as mount option.
  # see: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security-Enhanced_Linux-Working_with_SELinux-Mounting_File_Systems.html
- name: disable SELinux
  become: true
  selinux:
    state: disabled
  when: ansible_os_family == 'RedHat'
# - name: set SELinux context on deploy dir
#   sefcontext:
#     target: "{{ sufia_deploy_dir }}(/.*)?"
#     setype: "httpd_sys_content_t"
#     reload: True
#     state:  present
#   become: true
#   register: sufia_se_context
#
# - name: fix the SELinux Context for deploy dir
#   shell: "restorecon -R -v {{ sufia_deploy_dir }}"
#   become: true
#   when: sufia_se_context.changed

- name: generate rails secret_key_base
  # command: bash -lc "bundle exec rake secret"
  command: "openssl rand -hex 64"
  register: secret_key_base
  no_log: true
- lineinfile:
    dest: "{{ user_dir_path }}/{{ sufia_app_user }}/.bashrc"
    regexp: "^export SECRET_KEY_BASE="
    line: "export SECRET_KEY_BASE={{ secret_key_base.stdout }}"
    state: "present"
  no_log: true
  become: true
  notify: restart apache
  when: sufia_mode == "prod_like"

- name: test vars
  debug: var="{{ not sufia_debugging }}"

- name: store database password in app user's environment
  lineinfile:
    dest: "{{ user_dir_path }}/{{ sufia_app_user }}/.bashrc"
    regexp: "^export SUFIA_DATABASE_PASSWORD="
    line: "export SUFIA_DATABASE_PASSWORD={{ sufia_db_pass }}"
    state: "present"
  no_log: "{{ not sufia_debugging }}" # "{{ not sufia_debugging }}"
  become: true
  when: sufia_mode == "prod_like"

# TODO: consider moving to build task?
- name: start servers
  include: start_servers.yml
  when: sufia_mode == "dev"

- name: configure solr server
  include: configure_solr.yml
  when: sufia_mode == "prod_like"

- name: configure fedora
  include: configure_fedora.yml
  when: sufia_mode == "prod_like"

- name: flush handlers after configuring
  meta: flush_handlers

- name: reset database !DESTRUCTIVELY!
  include: reset_database.yml
  when: sufia_breaking_stuff_is_ok and sufia_mode == "prod_like"

# FIXME: should this be done in build? if it needs to be done for both build and
# deploy, we need to set the directory more flexibly
# FIXME: this shouldn't really be necessary to do again here...
# I believe it is because the template isn't aware of RAILS_ENV
- name: database migrations
  command: bash -lc "rails db:migrate"
  args:
    chdir: "{{ sufia_deploy_dir }}"
  environment:
    RAILS_ENV: '{{ rails_env }}'
    SECRET_KEY_BASE: "{{ secret_key_base.stdout }}"
    SUFIA_DATABASE_PASSWORD: "{{ sufia_db_pass }}"
  when: sufia_mode == "prod_like"

# FIXME: is this optional or not? depends on if it is idempotent enough to run
# on a deployed app after it was already run in the build environment
- block:
  # FIXME: this ugly and potentially confusing hack is in need of revision
  # begin dev mode block
  - block:
    - name: use build dir as deploy dir
      set_fact:
        sufia_deploy_dir: "{{ sufia_build_dir }}"
    when: sufia_mode == "dev"
  # end dev mode block

  - name: configure role_map
    include: configure_role_map.yml

  - name: configure background workers
    include: configure_background_workers.yml

  - name: load workflows
    include: load_workflows.yml
    when: sufia_mode == "prod_like"

  # TODO: port number is configurable and should thus be in a var
  - name: wait for solr
    wait_for:
      port: 8983
      delay: 10

  # TODO: port number is configurable and should thus be in a var
  - name: wait for fedora
    wait_for:
      port: 8984
      delay: 10

  - name: create default administrative set
    include: create_administrative_set.yml
    when: sufia_mode == "dev" # sufia_mode == "prod_like"

  - name: generate a work type
    include: generate_work_type.yml
    when: sufia_mode == "dev" and sufia_build_app

  # FIXME: this doesn't seem to work before the application has been visited for the first time
  # try to find a way to simulate that programmatically
  - name: precompile assets
    include: precompile_assets.yml
    when: sufia_mode == "prod_like"

  when: true # sufia_mode == "prod_like"
  become: true
  become_user: "{{ sufia_app_user }}"
