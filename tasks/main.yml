---
# environment:
#   RAILS_ENV:  "{{ rails_env }}"
#   PATH:       "{{ bundler_path }}:{{ ansible_env.PATH }}"

  # TODO: review: not at all sure these are having any effect, at least on CentOS
- name: set environment variables
  become: true
  lineinfile:
    dest: /etc/environment
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
    - regexp: "^RAILS_ENV="
      line:    "RAILS_ENV={{ rails_env }}"
    - regexp: "^PATH=*"
      line:    "PATH={{ bundler_path }}:{{ gems_path }}:{{ ansible_env.PATH }}"

- name: include os-specific vars
  include_vars: "{{ansible_os_family}}.yml"

- name: install os-specific prereqs
  include: "{{ansible_os_family}}_prereqs.yml"
  become: true

- name: install rails
  gem:
    name: rails
    version: "{{ rails_version }}"
    state: present
    # user_install: no

  # FIXME: parameterize to only install when needed
# - name: install pg gem for working with postgres
#   gem:
#     name: pg
#     state: present

# TODO: only include when needed
- name: inotify watcher fix
  include: inotify_watcher_fix.yml

  # TODO: consider assertion or flow control to prevent unproductive rebuild/redeploy settings on fresh system
- name: stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat

- name: stat sufia deploy dir
  stat:
    path: "{{ sufia_deploy_dir }}"
  register: sufia_deploy_stat

- name: test variables
  debug:
    msg: "sufia_version: {{ sufia_version }}"

- name: build a new application
  include: build_application.yml
  when: sufia_rebuild or (not sufia_deploy_stat.stat.exists and not sufia_build_stat.stat.exists)

- name: re-stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat

- name: deploy the application in the build directory
  include: deploy_application.yml
  # NOTE: can't deploy w/o something built
  # TODO: consider reflow to avoid illogical conditions
  when: sufia_build_stat.stat.exists and (sufia_redeploy or not sufia_deploy_stat.stat.exists)
  become: true

  # FIXME: this is not a good solution. issue may be that the deploy dir is mounted.
  # may need to provide secontext as mount option.
  # see: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security-Enhanced_Linux-Working_with_SELinux-Mounting_File_Systems.html
- name: disable SELinux
  become: true
  selinux:
    state: disabled
# - name: set SELinux context on deploy dir
#   sefcontext:
#     target: "{{ sufia_deploy_dir }}(/.*)?"
#     setype: "httpd_sys_content_t"
#     reload: True
#     state:  present
#   become: true
#   register: sufia_se_context
#
# - name: fix the SELinux Context for deploy dir
#   shell: "restorecon -R -v {{ sufia_deploy_dir }}"
#   become: true
#   when: sufia_se_context.changed

- name: generate rails secret_key_base
  # command: bash -lc "bundle exec rake secret"
  command: "openssl rand -hex 64"
  register: secret_key_base
- lineinfile:
    dest: "/home/{{ app_user }}/.bashrc"
    regexp: "^export SECRET_KEY_BASE="
    line: "export SECRET_KEY_BASE={{ secret_key_base.stdout }}"
    state: "present"
  become: true
  notify: restart apache

- name: start servers
  shell: screen -dm bash -c "bundle exec rake hydra:server >& log/sufia.log"
  args:
    chdir: "{{ sufia_deploy_dir }}"
  async: 30
  poll: 0
  when: sufia_mode == "dev"

- name: configure solr server
  include: configure_solr.yml
  when: sufia_mode == "prod_like"

- name: configure fedora
  include: configure_fedora.yml
  when: sufia_mode == "prod_like"

- name: flush handlers after configuring
  meta: flush_handlers

# FIXME: this shouldn't really be necessary to do again here...
# I believe it is because the template isn't aware of RAILS_ENV
- name: database migrations
  command: bash -lc "rake db:migrate"
  args:
    chdir: "{{ sufia_deploy_dir }}"
  environment:
    RAILS_ENV: '{{ rails_env }}'

- block:
  - name: configure background workers
    include: configure_background_workers.yml

  - name: create default administrative set
    include: create_administrative_set.yml

  - name: load workflows
    include: load_workflows.yml

  - name: generate a work type
    include: generate_work_type.yml
  when: true
