---
# builds a new hydra-based rails application

- name: clear out sufia build dir to build fresh
  file:
    path: "{{ sufia_build_dir }}"
    state: absent

- name: make sure base build dir exists
  file:
    path: "{{ sufia_base_build_dir }}"
    state: directory

# NOTE: don't install spring in production environments:
# https://github.com/projecthydra/hydra-head/issues/201
- name: adjust for the rails environment
  set_fact:
    skip: ""
- set_fact:
    exclude: "development, test"
    skip: "--skip-spring"
  when: rails_env == 'production'

- name: create rails app from template
  command: bash -lc "RAILS_ENV={{ rails_env }} rails _{{ rails_version }}_ new {{ sufia_app_name }} -m {{ sufia_template }} --database={{ sufia_db_provider }} {{ skip }}"
  args:
    chdir: "{{ sufia_base_build_dir }}"

  when: hydra_from_template

# FIXME: this probably won't work as it is and may never be needed
# block for non-templated sufia application
- block:
  - name: create rails app
    command: bash -lc "rails new {{ sufia_app_name }} --database={{ sufia_db_provider }} {{ skip }}"
    args:
      chdir: "{{ sufia_base_build_dir }}"

  - name: test sufia_version variables
    debug:
      msg: "sufia_version: {{ sufia_version }}"

  - name: test sufia_gems variables
    debug:
      msg: "sufia_gems: {{ sufia_gems }}"

  - name: add sufia and dependencies to new app's Gemfile
    blockinfile:
      dest: "{{ sufia_build_dir }}/Gemfile"
      block: "{{ sufia_gems }}"
      marker: "# {mark} Sufia Gems"

  # FIXME: couldn't convince the bundler module to install development gems!?!
  - name: install the project's gems
    bundler:
      chdir: "{{ sufia_build_dir }}"
      gem_path: "vendor/bundle"
      exclude_groups: "{{ exclude | default(omit) }}"
      extra_args: "--with development test"

  - name: "install {{ hydra_head_type }}"
    command: bash -lc "bundle exec rails generate {{ hydra_head_type }}:install -f"
    args:
      chdir: "{{ sufia_build_dir }}"

  when: not hydra_from_template and hydra_head_type == "sufia"
# end non-templated sufia block

# FIXME: this doesn't work as it is. favoring the template approach instead
# block for non-templated hyrax application
- block:
  - name: create rails app
    command: bash -lc "RAILS_ENV={{ rails_env }} rails _{{ rails_version }}_ new {{ sufia_app_name }} --database={{ sufia_db_provider }} {{ skip }}" # --skip-bundle
    args:
      chdir: "{{ sufia_base_build_dir }}"
    environment:
      RAILS_ENV: '{{ rails_env }}'

  # TODO: conditionally add dependencies based on sufia version
  - name: add hyrax and dependencies to new app's Gemfile
    blockinfile:
      dest: "{{ sufia_build_dir }}/Gemfile"
      block: "{{ hyrax_gems }}"
      marker: "# {mark} Hyrax Gems"

  # FIXME: couldn't convince the bundler module to install development gems!?!
  # - name: install the project's gems
  #   bundler:
  #     chdir: "{{ sufia_build_dir }}/"
  #     # gem_path: "vendor/bundle"
  #     exclude_groups: "{{ exclude | default(omit) }}"
  #     extra_args: "--with development"
  #   environment:
  #     RAILS_ENV: '{{ rails_env }}'
  - name: install the project's gems
    shell: bash -lc "RAILS_ENV={{ rails_env }} bundle install --path vendor/bundle --with {{ rails_env }}"
    args:
      chdir: "{{ sufia_build_dir }}"
    environment:
      RAILS_ENV: '{{ rails_env }}'

  - name: "install {{ hydra_head_type }}"
    command: bash -lc "rails generate {{ hydra_head_type }}:install -f"
    args:
      chdir: "{{ sufia_build_dir }}"

  - name: database migrations
    command: bash -lc "rails db:migrate"
    args:
      chdir: "{{ sufia_build_dir }}"
    environment:
      RAILS_ENV: '{{ rails_env }}'
      # SECRET_KEY_BASE: "{{ secret_key_base.stdout }}"
      # SUFIA_DATABASE_PASSWORD: "{{ sufia_db_pass }}"

  - name: Load workflows from the json files in config/workflows
    command: bash -lc "rails hyrax:workflow:load"
    args:
      chdir: "{{ sufia_build_dir }}"
    environment:
      RAILS_ENV: '{{ rails_env }}'
      # SECRET_KEY_BASE: "{{ secret_key_base.stdout }}"
      # SUFIA_DATABASE_PASSWORD: "{{ sufia_db_pass }}"

  when: not hydra_from_template and hydra_head_type == "hyrax"
# end non-templated sufia block

  # TODO: review - only prod_like?
- name: configure database
  include: configure_database.yml
  when: sufia_mode == "prod_like"

  # NOTE: this DESTRUCTIVE task is the sort of thing you'd need to use when
  # when developing, but sure isn't what you'd want to forget about and run
  # on a production system. it is necessitated by the fact that sufia's
  # database migrations are not idempotent. should they be?
  # IDK, but until they are, there's this
- block:
  - name: reset database !DESTRUCTIVELY!
    include: reset_database.yml
    when: sufia_breaking_stuff_is_ok # and sufia_mode == "prod_like"

  # FIXME: this is also done in this role's main playbook
  # (for the benefit of the deploy play). DRY it up
  - name: store database password in app user's environment
    lineinfile:
      dest: "{{ user_dir_path}}/{{ sufia_app_user }}/.bashrc"
      regexp: "^export SUFIA_DATABASE_PASSWORD="
      line: "export SUFIA_DATABASE_PASSWORD={{ sufia_db_pass }}"
      state: "present"
    no_log: "{{ not sufia_debugging }}"
    become: true

  - name: database migrations
    command: bash -lc "rake db:migrate"
    args:
      chdir: "{{ sufia_build_dir }}"
    environment:
      RAILS_ENV: '{{ rails_env }}'

  # FIXME: regex to respond to <= 7.2
  when: sufia_mode == "prod_like" # not hydra_from_template # sufia_version == '7.2.0
  # TODO: investigate necessity under various circumstances

- name: add to gitignore
  blockinfile:
    dest: "{{ sufia_build_dir }}/.gitignore"
    block: |
      /vendor/bundle
    marker: "# {mark} additional lines"
